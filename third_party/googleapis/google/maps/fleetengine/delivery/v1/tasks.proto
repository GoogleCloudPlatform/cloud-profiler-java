// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package maps.fleetengine.delivery.v1;

import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/maps/fleetengine/delivery/v1/delivery_vehicles.proto";
import "google/maps/fleetengine/v1/fleetengine.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

option go_package = "google.golang.org/genproto/googleapis/maps/fleetengine/delivery/v1;delivery";
option java_multiple_files = true;
option java_outer_classname = "Tasks";
option java_package = "google.maps.fleetengine.delivery.v1";
option objc_class_prefix = "CFE";

// A task in the Delivery API represents a single action to track.
// In general there is a distinction between shipment-related tasks and break
// tasks. A shipment can have multiple tasks associated with it; for
// example, one task for the pickup and one for the dropoff or transfer.
// Different tasks for a given shipment can be handled by different vehicles;
// for example, one vehicle handles the pickup and drives the shipment to the
// hub, while another drives the same shipment from the hub to the dropoff.
message Task {
  option (google.api.resource) = {
    type: "fleetengine.googleapis.com/Task"
    pattern: "providers/{provider}/tasks/{task}"
  };

  // Journey sharing specific fields.
  message JourneySharingInfo {
    // Tracking information for each stop that the assigned vehicle will
    // travel to before completing this task. This list may contain stops
    // from other tasks.
    //
    // The first segment,
    // `Task.journey_sharing_info.remaining_vehicle_journey_segments[0]`,
    // contains route information from the driver's last known location to the
    // upcoming VehicleStop. This current route information usually comes from
    // the driver app except for some cases noted in the documentation for
    // `DeliveyVehicle.current_route_segment`. The other segments in
    // `Task.journey_sharing_info.remaining_vehicle_journey_segments` are
    // populated by Fleet Engine and provide route information between the
    // remaining VehicleStops.
    repeated VehicleJourneySegment remaining_vehicle_journey_segments = 1;

    // Indicates the last reported location of the assigned vehicle
    // along the route.
    maps.fleetengine.v1.VehicleLocation last_location = 2;

    // Indicates whether the vehicle's lastLocation can be snapped to
    // the `current_route_segment`. False if `last_location` or
    // `current_route_segment` do not exist. This value is computed by
    // Fleet Engine. Any update from clients will be ignored.
    bool last_location_snappable = 3;
  }

  // The type of a Task.
  enum Type {
    // Default, the task type is not known.
    TYPE_UNSPECIFIED = 0;

    // A pickup task is the action taken for picking up a shipment from an end
    // customer. Depot or feeder vehicle pickups should use the `SCHEDULED_STOP`
    // type.
    PICKUP = 1;

    // A delivery task is the action taken for delivering a shipment to an end
    // customer. Depot or feeder vehicle dropoffs should use the
    // `SCHEDULED_STOP` type.
    DELIVERY = 2;

    // A scheduled stop task is used for planning purposes. For example, it may
    // represent picking up or dropping off shipments at feeder vehicles or
    // depots. It should not be used for any shipments that are picked up or
    // dropped off from an end customer.
    SCHEDULED_STOP = 3;

    // A task that indicates unavailability (e.g. driver breaks or vehicle
    // refueling).
    UNAVAILABLE = 4;
  }

  // The state of a Task indicating its progression.
  enum State {
    // Default, used for an unspecified or unrecognized Task state.
    STATE_UNSPECIFIED = 0;

    // The task has not yet been assigned a delivery vehicle, or the delivery
    // vehicle has not yet passed the task's assigned vehicle stop.
    OPEN = 1;

    // When the vehicle this task was assigned to passes the vehicle stop of
    // this task.
    CLOSED = 2;
  }

  // The outcome of attempting to execute a task. When TaskState is closed,
  // this indicates whether it was completed successfully or not.
  enum TaskOutcome {
    // Task outcome before being set.
    TASK_OUTCOME_UNSPECIFIED = 0;

    // Task was completed successfully.
    SUCCEEDED = 1;

    // Task could not be completed or was cancelled.
    FAILED = 2;
  }

  // The identity of the source which populated the task_outcome_location.
  enum TaskOutcomeLocationSource {
    // Task outcome before being set.
    TASK_OUTCOME_LOCATION_SOURCE_UNSPECIFIED = 0;

    // The provider specified the task_outcome_location.
    PROVIDER = 2;

    // The provider did not specify the task_outcome_location so Fleet Engine
    // used the last known vehicle location.
    LAST_VEHICLE_LOCATION = 3;
  }

  // In the format `providers/{provider_id}/tasks/{task_id}`. The task_id must
  // be a unique identifier and not a `tracking_id`. To store a `tracking_id` of
  // a shipment use the `tracking_id` field. Multiple tasks can have the same
  // `tracking_id`.
  string name = 1;

  // Required. Immutable. Defines the type of the task; for example, a break or shipment.
  Type type = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_behavior) = IMMUTABLE
  ];

  // Required. The current execution state of the task.
  State state = 3 [(google.api.field_behavior) = REQUIRED];

  // The outcome of the task.
  TaskOutcome task_outcome = 9;

  // The timestamp of when the task's outcome was set (from provider).
  google.protobuf.Timestamp task_outcome_time = 10;

  // Location where the task's outcome was set. Updated as part of UpdateTask.
  // redacted as part of SearchTasks requests. If not explicitly updated by
  // provider then Fleet Engine will populate it by default with the last known
  // vehicle location (raw location).
  LocationInfo task_outcome_location = 11;

  // Indicates where the value of the `task_outcome_location` came from.
  TaskOutcomeLocationSource task_outcome_location_source = 12;

  // Immutable. This field facilitates the storing of an ID for the customer to avoid
  // unnecessary or complicated mapping. Cannot be set for Tasks of type
  // `UNAVAILABLE` or `SCHEDULED_STOP`. IDs are subject to the
  // following normalization and restrictions:
  //
  // 1. IDs must be valid Unicode strings.
  // 2. IDs are limited to a maximum length of 64 characters.
  // 3. IDs will be normalized according to Unicode Normalization Form C
  // (http://www.unicode.org/reports/tr15/).
  // 4. IDs may not contain any of the following ASCII characters: '/', ':',
  // '\\', '?', or '#'.
  string tracking_id = 4 [(google.api.field_behavior) = IMMUTABLE];

  // Output only. The ID of the vehicle making this Task.
  string delivery_vehicle_id = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Immutable. The location where the task is to be completed.
  // Optional for `UNAVAILABLE` Tasks, required for all others.
  LocationInfo planned_location = 6 [(google.api.field_behavior) = IMMUTABLE];

  // Required. Immutable. Additional time to perform an action at this location.
  google.protobuf.Duration task_duration = 7 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_behavior) = IMMUTABLE
  ];

  // Output only. Journey sharing specific fields. Not populated when state is `CLOSED`.
  JourneySharingInfo journey_sharing_info = 8 [(google.api.field_behavior) = OUTPUT_ONLY];
}
