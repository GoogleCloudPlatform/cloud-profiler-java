// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.cloud.gaming.allocationendpoint.v1alpha;

import "google/api/annotations.proto";
import "google/api/client.proto";

option go_package = "google.golang.org/genproto/googleapis/cloud/gaming/allocationendpoint/v1alpha;allocationendpoint";
option java_multiple_files = true;
option java_outer_classname = "AllocationEndpointProto";
option java_package = "com.google.cloud.gaming.allocationendpoint.v1alpha";

service AllocationEndpointService {
  option (google.api.default_host) = "example.com";

  // Proxy allocation service to the Game Server Clusters.
  rpc Allocate(AllocationRequest) returns (AllocationResponse) {
  }
}

message AllocationRequest {
  // The required realm name in the following form:
  // `{location}/{realm}`.
  string realm = 1;

  // The default game server deployment name.
  // This is used to increase the likelihood of a successful
  // allocation.
  string default_game_server_deployment = 2;

  // The ordered list of game server labels to match for allocations.
  // If the first game server selector is not matched, the selection attempts
  // the second game server selector, and so on.
  repeated GameServerSelector game_server_selectors = 3;

  // Metadata is optional custom metadata that is added to the game server at
  // allocation. You can use this to tell the server necessary session data.
  MetaPatch metadata = 4;
}

message AllocationResponse {
  // The game server port info that is allocated.
  message GameServerStatusPort {
    string name = 1;

    int32 port = 2;
  }

  // The name of the allocated game server.
  string game_server_name = 1;

  // The allocated game server's port information.
  repeated GameServerStatusPort ports = 2;

  // The address of the allocated game server.
  string address = 3;

  // The node name of the allocated game server.
  string node_name = 4;

  // The game server cluster from which the game server was allocated.
  string game_server_cluster_name = 5;

  // The game server deployment from which the game server was allocated.
  string deployment_name = 6;
}

// MetaPatch is the metadata used to patch the Game Server metadata on
// allocation. It behaves exactly as it does in OSS.
message MetaPatch {
  map<string, string> labels = 1;

  map<string, string> annotations = 2;
}

// GameServerSelector used for finding a GameServer with matching labels.
message GameServerSelector {
  // Labels to match.
  map<string, string> match_labels = 1;
}
